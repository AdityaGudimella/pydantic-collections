[tool.poetry]
name = "pydantic-collections"
version = "0.5.2"
description = "Manipulate collections of pydantic models."
authors = [
  "Roman Snegirev <snegiryev@gmail.com>",
  "Aditya Gudimella <aditya.gudimella@gmail.com>",
]
keywords = [
  "python",
  "pydantic",
  "collections",
  "validation",
  "parsing",
  "serialization",
  "models",
]
license = "Apache 2"
readme = "README.md"
# Needed to indicate to libraries using this project that this project has type
# annotations
packages = [
  { include = "pydantic_collections" },
]
include = ["pydantic-collections/py.typed"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = "^3.7"
pydantic = ">=1.8.2"
typing-extensions = "^4.7.1"
# Optional dependencies
coveralls = { version = "^3.3.1", optional = true }
flake8 = { version = "^3.9.1", optional = true }
pytest = { version = "^7.4.0", optional = true }
pytest-cov = { version = "^3.0.0", optional = true }
pytest-vscodedebug = { version = "^0.1.0", optional = true }
toml = { version = "^0.10.2", optional = true }
xdoctest = { extras = ["all"], version = "^1.1.1", optional = true }

[tool.poetry.extras]
test = [
  "coveralls",
  "flake8",
  "pytest",
  "pytest-cov",
  "pytest-vscodedebug",
  "toml",
  "xdoctest",
]
# If you have multiple extra groups, you want to ensure that the end user is able to
# install all optional dependencies using the `pip install pytest-collections[all]`
# command. You can do this by listing all optional dependencies in the `all` extra
# group.
# There is a test that ensures that all optional dependencies are listed in the `all`.
all = [
  "coveralls",
  "flake8",
  "pytest",
  "pytest-cov",
  "pytest-vscodedebug",
  "toml",
  "xdoctest",
]

[tool.pytest.ini_options]
addopts = ["--strict-markers", "--xdoctest"]
log_cli = true
log_cli_level = "INFO"
testpaths = ["tests", "docs"]

[tool.pyright]
exclude = [
  ".history/",
  ".vscode-server/extensions",
  ".venv/",
  "stubs/",
  ".trunk/",
]
stubPath = "./stubs"
typeCheckingMode = "strict"
reportUnknownMemberType = false
reportUnknownArgumentType = false
pythonVersion = "3.10"

[tool.isort]
profile = "black"
default_section = "THIRDPARTY"
known_first_party = ["pydantic_collections"]
known_third_party = ["pydantic"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
multi_line_output = 3

[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39']
experimental-string-processing = true
verbose = true

[tool.ruff]
select = [
  # Flake8 Annotations: Code, Typing Annotations
  "ANN",
  # PyDocStyle: Docstrings
  "D",
  # PyCodeStyle: Code
  "E",
  # PyFlakes: Code
  "F",
  # ISort: Imports
  "I",
]
ignore = [
  # Missing type annotation for self in method
  "ANN101",
  # Missing type annotation for cls in method
  "ANN102",
  # Missing docstring in magic method
  "D105",
]

[tool.ruff.per-file-ignores]
"stubs/*.pyi" = [
  # Missing docstring in public module
  "D100",
  # Missing docstring in public class
  "D101",
  # Missing docstring in public method
  "D102",
  # Missing docstring in __init__
  "D107",
  # Missing docstring in public function
  "D103",
]
"tests/*.py" = [
  # Missing blank line after summary
  "D205",
]
"tests/conftest.py" = [
  # First line should be in imperative mood
  "D401",
]
